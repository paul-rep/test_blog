{"version":3,"sources":["redux/hooks.ts","redux/appSlice.ts","components/UserCard.tsx","components/UserList.tsx","components/Search.jsx","components/Header.jsx","components/Footer.jsx","components/PostList.jsx","App.tsx","hooks/useDebounceEffect.jsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","appSlice","createSlice","name","initialState","showPosts","userId","searchQuery","reducers","toggleShowPosts","state","setShowPosts","action","payload","selectUser","searchUsers","actions","UserCardContainer","styled","div","Button","button","UserCard","user","dispatch","email","phone","onClick","id","UserListContainer","UserList","users","map","SearchContainer","Iput","input","Search","app","value","onChange","e","target","type","placeholder","HeaderContainer","header","Logo","Header","handleSort","FooterContainer","footer","LeftIconContainer","RightIconContainer","Footer","handlePagination","Container","PostListContainer","PostList","show","useState","posts","setPosts","expanded","setExpanded","useEffect","fetchPosts","a","axios","get","res","data","console","log","p","Accordion","panel","event","isExpanded","sx","backgroundColor","color","paddingBottom","AccordionSummary","Typography","title","charAt","toUpperCase","slice","AccordionDetails","body","active","App","setUsers","setSortedUsers","selectedUserId","containerRef","useRef","start","setStart","fetchUsers","url","effect","deps","delay","direction","count","length","prev","handleSearch","trim","handler","setTimeout","clearTimeout","className","sort","b","Box","display","ref","Slide","in","container","current","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","appReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d96ab87.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport type { RootState } from './store'\n\n\n// Define a type for the slice state\ninterface PostsState {\n  showPosts: boolean,\n  userId: number,\n  searchQuery: string\n}\n\n// Define the initial state using that type\nconst initialState: PostsState = {\n    showPosts: false,\n    userId: 1,\n    searchQuery: \"\",\n}\n\nexport const appSlice = createSlice({\n  name: 'app',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    toggleShowPosts: state => {\n      state.showPosts = !state.showPosts;\n    },\n    setShowPosts: (state, action: PayloadAction<boolean>)=> {\n        state.showPosts = action.payload;\n    },\n    selectUser: (state, action: PayloadAction<number>) => {\n      state.userId = action.payload;\n    },\n    searchUsers(state, action: PayloadAction<string>){\n        state.searchQuery = action.payload\n    }\n  }\n})\n\nexport const { toggleShowPosts,selectUser,searchUsers,setShowPosts } = appSlice.actions\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectShowPosts = (state: RootState) => state.app.showPosts\n\nexport default appSlice.reducer","import React from 'react';\nimport  {IUserProps} from '../interfaces';\nimport styled from 'styled-components';\nimport { useAppDispatch } from '../redux/hooks'\nimport { selectUser,setShowPosts } from '../redux/appSlice';\n\nconst UserCardContainer = styled.div`\n    background-color: #333348;\n    border-radius: 40px;\n    color: #EEEEEE;\n    padding: 50px 50px;\n    display:flex;\n    flex-direction: column;\n    align-items:center;\n    justify-content:center;\n    text-align: center;\n`;\n\nconst Button = styled.button`\n    background-color: #52519D;\n    border-radius: 40px;\n    font-weight: 600;\n    color: #EEEEEE;\n    padding: 20px 44px;\n    border: none;\n    cursor: pointer;\n    transition: all ease .6s;\n    white-space: nowrap;\n    &:hover {\n        background-color: #12122D;\n        transform: scale(1.05);\n    }\n`;\n\nconst UserCard: React.FC<IUserProps> = ({user}) => {\n    const dispatch = useAppDispatch();\n    \n    const handleClick = () => {\n        dispatch(selectUser(user.id));\n        dispatch(setShowPosts(true));\n    }\n    return (\n        <UserCardContainer>\n            <p>{user.name}</p>\n            <p>{user.email}</p>\n            <p>{user.phone}</p>\n\n            <Button onClick={handleClick}>\n                View all posts\n            </Button>\n        </UserCardContainer>\n    )\n}\n\nexport default UserCard;\n","import  {UserListProps} from '../interfaces';\nimport { FC } from 'react';\nimport styled from 'styled-components';\nimport UserCard from './UserCard';\n\n\n\nconst UserListContainer = styled.div`\n    display:grid;\n    grid-template-columns: calc(50% - 15px) calc(50% - 15px);\n    grid-auto-rows: min-content;\n    grid-column-gap: 30px;\n    grid-row-gap: 30px;\n    @media (max-width: 768px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nconst UserList: FC<UserListProps> = ({users}) => {\n    return (\n        <UserListContainer>\n            {users.map(user => <UserCard user={user} key={user.id}></UserCard>)}\n        </UserListContainer>\n    )\n}\n\nexport default UserList;\n","import styled from \"styled-components\";\n\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport { searchUsers } from '../redux/appSlice';\n\nconst SearchContainer = styled.div`\n    height: auto;\n    max-width: 240px;\n    color: #EEEEEE;\n`;\n\nconst Iput = styled.input`\n    height: 100%;\n    border: none;\n    font-size: 18px;\n    background: #333348;\n    border-radius: 40px;\n    padding: 20px 35px;\n    outline: none;\n    color: #EEEEEE;\n    &::placeholder {\n        color: #EEEEEE;\n    }\n`;\n\nconst Search = () => {\n    const dispatch = useAppDispatch();\n    const searchQuery = useAppSelector(state => state.app.searchQuery);\n\n    const onChange = (e) =>{\n        dispatch(searchUsers(e.target.value));\n    }\n\n    return (\n        <div>\n            <SearchContainer>\n                <Iput value={searchQuery} onChange={onChange} type=\"text\" placeholder=\"Search\" />\n            </SearchContainer>\n        </div>\n    )\n}\n\nexport default Search;\n","import styled from \"styled-components\";\nimport Search from \"./Search\";\n\nimport { useAppDispatch } from '../redux/hooks'\nimport { selectUser,setShowPosts } from '../redux/appSlice';\n\nconst HeaderContainer = styled.header`\n    padding:30px;\n    display: flex;\n    align-items: center;\n    justify-items: center;\n    justify-content: space-around;\n    max-width: 1470px;\n\n    @media (max-width: 740px) {\n      /* width: 50%; */\n      flex-direction: column;\n      & > * {\n          margin-bottom: 20px;\n      }\n    }\n`;\n\nconst Logo = styled.div`\n    font-size: 24px;\n    line-height: 30px;\n    display: flex;\n    cursor: pointer;\n`;\n\nconst Button = styled.button`\n    background-color: #333348;\n    border-radius: 40px;\n    font-weight: 600;\n    color: #EEEEEE;\n    padding: 20px 44px;\n    border: none;\n    cursor: pointer;\n    font-size: 18px;\n    transition: all ease .6s;\n    &:hover {\n        background-color: #52519D;\n        transform: scale(1.05);\n    }\n`;\n\n\nconst Header = ({handleSort}) => {\n     const dispatch = useAppDispatch();\n\n    return (\n      <HeaderContainer>\n          <Logo onClick={() => dispatch(setShowPosts(false))}>Lorem ipsum</Logo>\n          <Button onClick={handleSort}>Sort users</Button>\n          <Search />\n      </HeaderContainer>\n    )\n}\n\nexport default Header;\n","import styled from \"styled-components\";\n\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\n\nconst FooterContainer = styled.footer`\n    display: flex;\n    padding-bottom: 40px; \n    justify-items: center;\n    justify-content: space-around;\n    align-items: center;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 99;  \n    @media (max-width: 1024px) {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        z-index: 99;   \n    }\n`;\n\nconst LeftIconContainer = styled.div`\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    position: absolute;\n    left: 50px;\n    @media (max-width: 1024px) {\n        /* margin-left: 50px; */\n    }\n`;\nconst RightIconContainer = styled.div`\n    display: flex;\n    align-items: center;\n    position: absolute;\n    right: 50px;\n    cursor: pointer;\n    @media (max-width: 1024px) {\n        /* margin-right: 50px; */\n    }\n`;\n\nconst Footer = ({handlePagination}) => {\n    return (\n        <FooterContainer>\n            <LeftIconContainer onClick={() => handlePagination(\"left\")}>\n                <ArrowBackIosIcon/> Previous\n            </LeftIconContainer>\n            <RightIconContainer onClick={() => handlePagination(\"right\")}>\n                Next  <ArrowForwardIosIcon/>\n            </RightIconContainer>\n        </FooterContainer>\n    )\n}\n\nexport default Footer;\n","import React from 'react'\nimport styled  from 'styled-components';\nimport {useEffect,useState} from 'react';\nimport axios from 'axios';\n\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport Typography from '@mui/material/Typography';\n\nconst Container = styled.div`\n overflow-y: hidden;\n`;\nconst PostListContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 30px;\n    background-color: #333348;\n    border-radius: 40px;\n`;\n\n\nconst PostList = ({show,user}) => {\n  const [posts, setPosts] = useState([]);\n  const [expanded, setExpanded] = useState(false);\n\n  const handleChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n    useEffect(()=>{\n        try {\n            const fetchPosts = async ()=> {\n                const res = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${user}`);\n                setPosts(res.data);\n                return res.data;\n              }\n            fetchPosts();\n        }catch(e){\n            console.log(e);\n        }\n      },[user]);\n\n    if (show) {\n        return (\n            <Container>\n            <PostListContainer>\n            {posts.map(p => \n                <Accordion key={p.id} expanded={expanded === `panel${p.id}`} onChange={handleChange(`panel${p.id}`)}\n                sx={{\n                    backgroundColor: \"#333348\",\n                    color: \"#EEE\",\n                    paddingBottom: \"5px\"\n                }}>\n                <AccordionSummary\n                    aria-controls=\"panel1a-content\"\n                    id={`panel${p.id}a-header`}\n                    \n                    >\n                    <Typography>{p.title.charAt(0).toUpperCase() + p.title.slice(1)}</Typography>\n                </AccordionSummary>\n                    <AccordionDetails>\n                    <Typography>\n                        {p.body}\n                    </Typography>\n                </AccordionDetails>\n                </Accordion>\n            )}\n            </PostListContainer>\n            </Container>\n        )\n    } else {\n        return null;\n    }\n    \n}\n\nexport default PostList;\n","import './App.css';\nimport {useEffect,useState,useRef} from 'react';\nimport axios from 'axios';\nimport { IUser } from './interfaces';\nimport UserList from './components/UserList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport PostList from './components/PostList';\nimport { useAppSelector, useAppDispatch } from './redux/hooks'\nimport styled from 'styled-components';\nimport { useDebouncedEffect } from './hooks/useDebounceEffect';\n\nimport { setShowPosts } from './redux/appSlice';\n\nimport Box from '@mui/material/Box';\nimport Slide from '@mui/material/Slide';\n\nconst Container = styled.div<{ active?: boolean }>`\n    position: relative;\n    margin: 20px auto;\n    width: 80%;\n    height: 70%;\n    display: grid;\n    grid-template-columns: calc(50% - 15px) calc(50% - 15px);\n    grid-column-gap: 30px;\n    grid-row-gap: 30px; \n    transition: all ease 500ms;\n    ${({ active }) => !active && `\n      grid-template-columns: auto;\n      width: 50%;\n    `}\n    @media (max-width: 1024px) {\n      width: 80%;\n    }\n    @media (max-width: 1240px) {\n      grid-template-columns: 1fr;\n    }\n    @media (max-width: 780px) {\n      width: 50%;\n      justify-content: center;\n      justify-items: center;\n    }\n`;\n\nconst App = () => {\n  const dispatch = useAppDispatch();\n\n  const [users, setUsers] = useState<IUser[]>([]);\n  const [sortUsers, setSortedUsers] = useState<IUser[]>(users);\n\n  const showPosts = useAppSelector(state => state.app.showPosts);\n  const selectedUserId = useAppSelector(state => state.app.userId);\n  const searchQuery = useAppSelector(state => state.app.searchQuery);\n  const containerRef = useRef(null);\n  const [start, setStart] = useState(4);\n\n  const limit = 4;\n  \n const handleSort = ()=>{\n    setSortedUsers(users.sort((a,b) => (a.name < b.name ? -1 : 1)));\n  }\n\n  const fetchUsers = async (url: string)=> {\n    try {\n      const res = await axios.get(url);\n      setUsers(res.data);\n    } catch(e){\n      console.log(e);\n    }\n  }\n\n  useEffect(()=>{\n    fetchUsers(`https://jsonplaceholder.typicode.com/users?_limit=${limit}`);\n  },[])\n  \n  const handlePagination = async (direction: string) => {\n    dispatch(setShowPosts(false));\n    const res = await axios.get(`https://jsonplaceholder.typicode.com/users`);\n    const count = res.data.length;\n\n    if (direction == \"left\"){\n      if (start >= limit){\n        setStart(prev => prev - limit);\n      }\n    } else {\n      if ((start + limit) < count){\n        setStart(prev => prev + limit);\n      }\n    }\n\n    fetchUsers(`https://jsonplaceholder.typicode.com/users?_start=${start}&_limit=${limit}`);\n  }\n  const handleSearch = async ()=> {\n    fetchUsers(`https://jsonplaceholder.typicode.com/users?q=${searchQuery}&_limit=${limit}`)\n  }\n  useDebouncedEffect(() => {\n    if (searchQuery.trim() !== \"\"){\n      handleSearch();\n    } else {\n      fetchUsers(`https://jsonplaceholder.typicode.com/users?_limit=${limit}`);\n    }\n  }, [searchQuery], 500);\n\n\n  return (\n      <div className=\"App\">\n        <Header handleSort={handleSort}/>\n         <Container active={showPosts}>           \n               <UserList users={users}/>\n                <Box \n                sx={{\n                  display: showPosts ? 'flex' : 'none',\n                }}\n                ref={containerRef}>\n                  <Slide direction=\"left\" in={showPosts} container={containerRef.current}>\n                    <Box>\n                    <PostList user={selectedUserId} show={showPosts}/>\n                    </Box>\n                  </Slide>\n                </Box>\n             \n          </Container>\n        <Footer handlePagination={handlePagination}/>\n      </div>\n  );\n}\n\nexport default App;\n","import { useEffect } from \"react\";\n\nexport const useDebouncedEffect = (effect, deps, delay) => {\n  useEffect(() => {\n    const handler = setTimeout(() => effect(), delay);\n\n    return () => clearTimeout(handler);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...(deps || []), delay]);\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { configureStore } from '@reduxjs/toolkit'\nimport appReducer from './appSlice'\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer\n  }\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}